/*
        Copyright 2021. Huawei Technologies Co., Ltd. All rights reserved.

        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
*/
using System;
using System.IO;
using Android.Graphics;
using Android.Media;

namespace XHms_Drive_Kit_Demo_Project.DriveKit.Utils.Thumbnail
{
    /// <summary>
    /// Generate image thumbnail.
    /// </summary>
    public class ThumbnailUtilsImage
    {
        private const string Tag = "ThumbnailUtilsImage";
        public static readonly int FileTypePng = 102;
        private ThumbnailUtilsImage()
        {

        }

        public static void GenerateImageThumbnail(string imageName, string thumbnailName, int width, int height, int type)
        {
            System.IO.FileStream os = null;
            try
            {
                Bitmap bmp = null;
                BitmapFactory.Options ops = new BitmapFactory.Options();
                ops.InJustDecodeBounds = true;
                bmp = BitmapFactory.DecodeFile(imageName, ops);

                ops.InJustDecodeBounds = false;
                // Computing Zooms in ratio
                int outHeight = ops.OutHeight;
                int outWidth = ops.OutWidth;
                int widthPercent = outWidth / width;
                int heightPercent = outHeight / height;
                int sampleSize = 1;
                if (widthPercent < heightPercent)
                {
                    sampleSize = widthPercent;
                }
                else
                {
                    sampleSize = heightPercent;
                }
                if (sampleSize <= 0)
                {
                    sampleSize = 1;
                }
                ops.InSampleSize = sampleSize;
                // Read the picture againand set options.inJustDecodeBounds to false.

                bmp = BitmapFactory.DecodeFile(imageName, ops);
                // Use ThumbnailUtils to create a thumbnail.
                // The size of the thumbnail of the access control file on the server cannot exceed 8 times the size of the file.
                // If the large thumbnail of some small images is generated by 1680*1920, the upload fails.
                if (outHeight < height || outWidth < width)
                {
                    bmp = ThumbnailUtils.ExtractThumbnail(bmp, outWidth, outHeight, ThumnailExtractOptions.RecycleInput);
                }
                else
                {
                    bmp = ThumbnailUtils.ExtractThumbnail(bmp, width, height, ThumnailExtractOptions.RecycleInput);
                }

                string fileNameParent = thumbnailName.Substring(0, thumbnailName.LastIndexOf(Java.IO.File.Separator));
                Java.IO.File file = new Java.IO.File(fileNameParent);
                if (!file.Exists())
                {
                    bool mkdirs = file.Mkdirs();
                    if (!mkdirs)
                    {
                        Log.Logger.Error(Tag, "getImageThumbnail file.mkdirs fail");
                    }
                }
                os = new FileStream(thumbnailName, FileMode.OpenOrCreate);
                if (type == FileTypePng)
                {
                    bmp.Compress(Bitmap.CompressFormat.Png, 90, os);
                }
                else
                {
                    bmp.Compress(Bitmap.CompressFormat.Jpeg, 90, os);
                }
            }
            catch (Java.IO.FileNotFoundException e)
            {
                Log.Logger.Error(Tag, "read or write file error");
            }
            catch (Exception e)
            {
                Log.Logger.Error(Tag, "internal error " + e.ToString());
            }
            finally
            {
                if (os != null)
                {
                    try
                    {
                        os.Close();
                    }
                    catch (Exception e)
                    {
                        Log.Logger.Error(Tag, "close FileOutputStream error");
                    }
                }
            }
        }
    }
}